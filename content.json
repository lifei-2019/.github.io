[{"title":"宝藏男孩本人！","date":"2019-10-21T01:52:59.000Z","path":"treasure/","text":"自己日常搜集的一些软件和网站，希望能帮到大家。 Icons Download easyicon(动漫卡通图标较多) font awesome（各大软件平台图标较多） JS Downloadbootcsn（五花八门啥都有） 3D JS alteredqualia（有的有些猎奇） ToolsSublime Text3（编辑器 安装完插件如有神助 配置过程见我的SublimeText3插件安装） Typora（写博客，写知乎必备神器，MarkDown进阶版 配置过程见 Typora入门 ） Git Bash（同步GitHub必备） Notepad++（超轻量级编辑器 没有写代码提醒 但是用起来真的快） Navicat（连数据库的 非常好用 正版要购买） PaperArxiv（学计算机的都懂） paper with code（论文附代码 机器学习的福音 配合arxiv使用更佳） Sci论文下载（Sci里找到标题来这下载 美滋滋） 谷粉学术（舍友推荐） WallpaperWallPaper AByss（无意间找着的，还挺好用） Programming廖雪峰老师的网站（看过Git和Python 都很不错） 力扣（神仙打架） 在线正则表达式 Video DownloadJiJiDown（B站视频下载！敲有用！） 优酷、爱奇艺等（有的会失效，可以试试） QR Code草料二维码（微信、网站等生成二维码） Online PS改图宝 Screen to gif因为写博客经常需要录制屏幕并制作gif图，下载后使用极佳，强推！“小而实用”，大小仅2M多（压缩后才几百K），但录制调帧导出一条龙。（网上资源一抓一大把就不放下载链接了） VIP Buy迅雷、B站等会员优惠购（低至3元/月）（经济条件允许的话还是支持正版！） Remote control teamviewer（用过的都说好，算是远程控制电脑软件里不错的！）","updated":"2019-10-21T05:08:54.544Z","link":"","tags":[{"name":"宝藏男孩","slug":"宝藏男孩","permalink":"https://lifei-2019.github.io/tags/宝藏男孩/"}]},{"title":"人类群星闪耀时","date":"2019-10-17T12:36:03.000Z","path":"人类群星闪耀时/","text":"翻看全书，所有的故事大致可分为两类：第一类是从无到有，《不朽的逃亡者》、《亨德尔的复活》、《一夜天才》、《玛丽恩浴场里的哀歌》、《跨越大洋的第一句话》等等，这些故事的主人公为了探索世界，追求自己的理想，都付出了艰难的努力。这些创造文明的人经历了病痛、贫病、失恋等等痛苦，甚至有人还被全世界认为是骗子，可是他们坚韧不拔，没有背叛心中的理想与信念，最终幻化成人类星空中闪亮的一瞬。 相比创造，毁灭则容易的多，这就是全书第二类故事，比如《拜占庭的陷落》、《滑铁卢决定胜负的一瞬》、《壮丽的瞬间》、《黄金国的发现》等等，也许一秒钟的迟疑就能毁灭一个英雄、一个小时所发生的事足以毁灭千年的文明。与创造相比，毁灭简直是太容易了，容易到只需要一瞬。这些瞬间在星空中闪亮一下，就重归黑暗了。 说几个我印象比较深刻的 《不朽的逃亡者》描述的是1513年太平洋的发现。在哥伦布第一次发现美洲大陆归来后，由贪欲引发的黄金国之梦一度让许多人为之痴迷，最终落得破产的后果；努涅斯•巴尔博亚就是其中一名，但他精明在能够抓住生存的每一丝希望，在违抗西班牙国王的旨意后，他清楚地知道要么惨死在断头台上，要么为祖国占有尚未发现的海洋，逃遁到不朽的事业中去。他成功了，但是不久便死在妒忌它成就的心腹手里。 在《滑铁卢决定胜负的一瞬》里，法军元帅格鲁希因为在短短一秒钟内错判的形势，没有及时支援拿破仑，错失了良机，导致滑铁卢战役的失败。滑铁卢的失败让英雄拿破仑跌落凡尘，而毁灭英雄的正是一个庸人格鲁希。虽然格鲁希后来在每个职位上都表现出色，但他一生也不能弥补在滑铁卢所犯的错。茨威格在这篇文章里认为格鲁希是个庸人、畏首畏尾的人，作者慨叹：“命运鄙视地把畏首畏尾的人拒之门外。命运——这世上的另一位神灵，只愿意用热烈的双臂把勇敢者高高举起，送上英雄们的天堂。” 《拜占庭的陷落》里，奥斯曼帝国的苏丹穆罕默德二世攻占拜占庭，拜占庭得不到欧洲的援军帮助，但积极备战。最后仅仅因为一扇凯卡波尔塔小门没关，土耳其军队顺利进入君士坦丁堡，千年帝国拜占庭从此陷落了。城内百姓被劫掠了三天三夜，拜占庭帝国的文明也被毁灭。作者惋惜、感叹：“历史犹如人生，业已失去的瞬间，不会因为抱撼的心情而重返，仅仅一个小时所贻误的东西，用千年的时光也难以赎回。” 《亨德尔的复活》章节，亨德尔在半身瘫痪之后，以坚强的意志积极恢复身体，终于在几个月的温泉治疗之后重新站了起来，创造了奇迹。身体恢复之后，他不知疲倦的创作，至清唱剧《弥赛亚》创作完成之后，他将没睡的觉和没吃的饭都补了回来。《弥赛亚》是一部伟大的作品，亨德尔更是一位伟大的音乐家，伟大的音乐家创造伟大的乐曲，其中的过程是艰难的、忘我的，甚至是经历着病痛的折磨，克服一切的办法只有顽强的意志力。 《向上帝逃亡》，在我看来是作者通过剧本的形式，对战争进行了一番辩论，从托尔斯泰的口中说出暴力革命只会让强权变成另一个强权、压迫变成另一种压迫这样的观点。最后，托尔斯泰在人生的最后一刻摆脱了命运，从伯爵蜕变成了普通人，逝世于站长那寒酸的、不成样子的床上。 读完整本书，似乎有些理解在译序茨威格的反战思想——虽然有些战争是正义的，可它们同样都会带来毁灭。那么多伟大的人呕心沥血的创造了我们的文明，却要因为一场战争、在一瞬间被毁灭，而那些本该闪耀在我们人类星空上的人，却因为一瞬间的失误而遗失在历史的长河中。这一瞬间就成了永恒，即使用千年的时光也难以赎回。 同时，茨威格的死亡在那个时代似乎也是必然的。在遭到纳粹驱逐八年后，第二次世界大战发生后三年，1942年2月23日，他选择服毒自杀，遗书中说：“我的母语世界已经沉沦，我的精神家园，欧洲，已经自我毁灭。（the world my own language having disappeared from me and my spiritual home,Europe,having destroyed itself.）”一个人，精神故乡由于自己的祖国而分崩离析，导致自己浪迹天涯、无家可归，那还不如及时的不失尊严的结束自己的生命为好。 PS: 自己收藏的一些常识，与君共享。 哈利路亚：犹太教和基督教的欢呼语，意思赞美上帝 ==西俗：在主显节，一月六日耶稣出现的日子，得到馅中有豆的人称为豆王== 耐基 希腊神话里的胜利女神 ==萨梯儿 希腊神话里的林神：醉鬼或色鬼同义词== 六翼天使：《圣经》里最高阶天使。 巴别塔：《圣经》里未建成的通天塔 ==祖特尔在加利福利亚发现“黄金国”== 1837年电报机第一次使用 居鲁士•弗•菲尔德 跨洋通信 ==挪威阿蒙森发现南极 第二个英国斯科特== 赫克托 希腊神话特洛伊战争的英雄 安德洛马赫 赫克托的妻子，美貌钟爱丈夫 ==美国记者约翰•里德目睹十月革命，著有《震撼世界的十天》== 当强烈的个人意志与历史宿命碰撞之际，犹如耀眼的星光在夜空中闪现，那样的时刻足以照亮人类文明的天空。","updated":"2019-10-17T13:19:52.196Z","link":"","tags":[{"name":"读书","slug":"读书","permalink":"https://lifei-2019.github.io/tags/读书/"}]},{"title":"真相捕捉【含剧透】","date":"2019-10-15T02:36:33.000Z","path":"真相捕捉/","text":"在bilibili上偶然看到@蔡老板家的长工解说英剧《真相捕捉》，看了几分钟深知这部剧值得看原剧，自此一发不可收拾，两天追完了。（PS：感觉最近的英剧都不错） BBC 的这部六集迷你剧《真相捕捉》（The Capture）是一个由虚假视频引出的故事。豆瓣评分：9.1 以下内容含剧透！！！！ 剧情反转较多。概括的来说，真相捕捉说的是几个律师和英帝、美帝用一个小士兵当牺牲品，互相较量。故事的背景是美帝、英帝利用修改监控画面来逮捕恐怖分子，而几个律师认为这种行为有碍司法公正。于是律师们自导自演了一出修改监控画面，构陷一名士兵绑架，意图在案件进入司法程序后放出原本视频，证明监控是可以被修改的。希望以此来推翻美帝和英帝此前利用伪造监控进行的不公正审判。 首先谈谈剧中的AI换脸技术。早在2017年底，国外论坛就出现了通过计算机学习来更换视频中人脸的AI算法，那个时候，AI算法的使用门槛还很高，需要编译代码和高性能的显卡做信息的运算处理。 2019年8月，”ZAO”APP的出现，再次让AI换脸，火遍了大街小巷。人们只需上传一张照片，运用APP自带的AI换脸功能，就可以将短视频中的演员的脸换成自己的脸。 相比之前高门槛的AI编程算法，“ZAO”把AI换脸的视频制作运算放到了服务器上，用户不再需要高性能的手机配置，用户体验效果极其良好。 因AI换脸“出演”《射雕英雄传》的杨幂 ==换脸技术已经不再是科幻小说中的桥段，而是真实存在的事实。== 再来谈谈司法。百度百科上对于第一手材料的定义是—— 从亲身实践或调查中直接获得的材料； 第一手材料是直接的证据，是未经过任何修饰的信息 ,意思是最原始，未经改动的 ，通常也比喻最真实的信息。 未来，实时监控录像、视频录像是否可以作为第一手材料，对于司法部门来说是个巨大的槛。人们对于常识的局限性，也影响着人们的判断。 技术的爆炸发展，不仅让监控视频成为了铁证，同时也让我们步入了「后真相时代」。如果，铁证也有被篡改的一天，我们究竟还能相信什么呢？ 「后真相」一词是用来形容一种不正常的舆论生态，主要指媒体传播起到的是煽动情感、强化偏见的作用，其所产生的影响超过了客观事实对人们的影响，人们只在意情绪或主张，而不管事实和道理。 于我个人而言看完这部剧，印象最深刻的是第五集结尾处瑞秋的上司由于某些原因告诉瑞秋所有的真相后，事情的难题变为我们应该为了保护两千人而把有潜在犯罪危险的人陷害入狱还是还未犯罪的人一个清白然后向上帝祈祷他的犯罪危险只是潜在的？ 911以后《爱国者法案》被推行，“在国家遭遇威胁时，执法部门总是借机以「国家安全」为名，扩大部门权力…政府掌握任意性权力隐含巨大威胁，因为它既可以用来打击恐怖主义，也可以被用来镇压不同意见者”（王希《原则与妥协——美国宪法的精神与实践》）。 说的明白些，便是国家安全与个人权利谁更重要？ 更新于10/15 看完有些影评，发现自己思想的深度还是不够。 如果只从上述角度来看这部剧，似乎有些浅显。除了美帝、英帝的霸道行为，这部剧的另一叙事主题就是那些律师们。通过修改监控实时画面，构陷无辜者入狱来达成自己的目的。不论律师们如何弘扬自己的目的多么高尚，也无法掩盖这种行为的卑劣。 有计划性的通过特定案件来冲击现有体系，希望借此来改变社会。这部剧里的行为，美帝早在50/60年代甚至更早以前就已经不是新鲜事了。甚至联邦最高法院的大法官瑟古特·马歇尔早年就是职业干这行的，他们组成团体将热点种族案件带入各州和联邦法院，利用十四修正案挑战现有种族歧视与隔离政策。 当然不能否认这些人的“宏大目标”的正面意义，不然今天的美帝大概也没法宣传自己的“普世价值”了。 我只是很好奇，瑟古特·马歇尔这样的律师和《真相捕捉》里的这批律师有什么区别呢？从目的来看，二者都是为了宏大理想社会公正，匡正司法体系而奋斗。微观来说，二者出发点又都是被一个个个体遭遇的不公正触动。那么问题到底出在哪里呢？ 作为一个理想主义者，我有时会拷问自己，“理想”要实现付出的代价是什么？你又是否有权力让别人为了自己的理想而付出代价？答案当然是不唯一的。秦晖老师很多年前有篇文章讲我们的左派和右派都在讨论假问题，说的很在理，虽然他说的左右和大多数人理解的左右不是一回事。秦文章里有个观点，他觉得极左与极右看似极端对立，实际上只是一步之遥。我的理解里，左派右派讲的大多时候关注的是right的问题，而极左极右则扩展到了power上去。 作为个体的人，当然是没有资格要求他人为自己的理想而牺牲的，不论这个理想多么的“正确”。尊重他人的自由和自由的选择，应该算是一种常识（当然这个常识未必人人能懂）。但是有自己的理想蓝图并有power为之护航时，情况就大不相同了。 英剧里的律师当然是没有power的，但是他所追逐的理想，在实现过程里必然要依傍现有体系，并通过体系来实现自己的理想。这一过程里，如果缺乏对个体生命和自由的尊重，漠视个体的人的利益，铁定要走到自己理想的对立面上去。 所以，日常生活中当我碰到那些有宏大理想口若悬河的人，大概率是要离他们远一点的。倒不是怀疑他们实现理想的能力，只是害怕他们的理想未来里没有我。 深秋已过，凛冬将至，看个《真相捕捉》，雪上加霜吧。","updated":"2019-10-21T05:02:48.530Z","link":"","tags":[{"name":"英剧","slug":"英剧","permalink":"https://lifei-2019.github.io/tags/英剧/"}]},{"title":"python小技巧","date":"2019-10-15T00:49:07.000Z","path":"python小技巧/","text":"1. 反转字符串采用切片操作实现字符串的反转： 1234567# Reversing a string using slicingmy_string = &quot;ABCDE&quot;reversed_string = my_string[::-1]print(reversed_string)# Output# EDCBA 2. 实现首字母大写这个小技巧是让字符串中每个单词的首字母变为大写，通过方法 title() 实现： 123456my_string = &quot;my name is chaitanya baweja&quot;# using the title() function of string classnew_string = my_string.title()print(new_string)# Output# My Name Is Chaitanya Baweja 3. 查找字符串中唯一元素这个技巧是查找字符串中不重复的元素有哪些，通过集合 set 来实现： 123456789my_string = &quot;aavvccccddddeee&quot;# converting the string to a settemp_set = set(my_string)# stitching set into a string using joinnew_string = &apos;&apos;.join(temp_set)print(new_string) 4. 打印 n 次字符串或者列表这个技巧通过乘法即可实现打印多次的操作： 123456789n = 3 # number of repetitionsmy_string = &quot;abcd&quot;my_list = [1,2,3]print(my_string*n)# abcdabcdabcdprint(my_list*n)# [1,2,3,1,2,3,1,2,3] 这个技巧比较有趣的应用是定义一个包含 n 个重复的常数元素的列表，如下所示： 123n = 4my_list = [0]*n # [0, 0, 0, 0] 5. 列表推导式列表推导式是一种非常优雅的基于其他列表来创建新列表的方法，示例如下所示： 123456original_list = [1,2,3,4]new_list = [2*x for x inoriginal_list]print(new_list)# [2,4,6,8] 6. 交换两个变量Python 中交换两个变量的数值是非常简单的，完全不需要第三个变量作为中间值。示例如下所示： 12345a = 1b = 2a, b = b, aprint(a) # 2print(b) # 1 7. 字符串分割为一串子字符串列表采用 split() 方法可以将字符串分割为一个包含其子字符串的列表，示例如下所示： 12345678910string_1 = &quot;My name is Chaitanya Baweja&quot;string_2 = &quot;sample/ string 2&quot;# 默认分割符 &apos; &apos;print(string_1.split())# [&apos;My&apos;, &apos;name&apos;, &apos;is&apos;, &apos;Chaitanya&apos;, &apos;Baweja&apos;]# 自定义分割符 &apos;/&apos;print(string_2.split(&apos;/&apos;))# [&apos;sample&apos;, &apos; string 2&apos;] 8. 合并多个字符串为一个字符串采用 join() 方法可以将多个字符串合并为一个字符串。这相当于上一条技巧的反向操作。示例如下所示： 123456list_of_strings = [&apos;My&apos;, &apos;name&apos;, &apos;is&apos;, &apos;Chaitanya&apos;, &apos;Baweja&apos;]# Using join with the comma separatorprint(&apos;,&apos;.join(list_of_strings))# Output# My,name,is,Chaitanya,Baweja 9. 判断字符串是否回文通过反转字符串，再和原字符串比较，可以判断是否为回文，示例如下： 1234567my_string = &quot;abcba&quot;if my_string == my_string[::-1]: print(&quot;palindrome&quot;)else: print(&quot;not palindrome&quot;)# Output# palindrome 10. 统计列表元素的个数有多种方式可以实现这个技巧，但我最喜欢的是采用 Counter 类。 Counter 可以统计给定列表中每个元素的个数，返回一个字典格式。示例如下，其中most_common()方法可以返回列表中数量最多的元素 1234567891011121314# finding frequency of each element in a listfrom collections import Countermy_list = [&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;d&apos;,&apos;d&apos;,&apos;d&apos;,&apos;d&apos;]count = Counter(my_list) # defining a counter objectprint(count) # Of all elements# Counter(&#123;&apos;d&apos;: 5, &apos;b&apos;: 3, &apos;a&apos;: 2, &apos;c&apos;: 1&#125;)print(count[&apos;b&apos;]) # of individual element# 3print(count.most_common(1)) # most frequent element# [(&apos;d&apos;, 5)] 11. 判断两个字符串是否是字谜(Anagrams)字谜(Anagrams)是指将一个单词打乱其字母顺序，重新排列为一个新的单词。 Counter正好可以用于解决这个问题，因为如果两个字符串的 Counter 对象相等，就表示它们就是字谜，因为包含相同元素且元素数量都相同。 示例如下： 1234567from collections import Counterstr_1, str_2, str_3 = &quot;acbde&quot;, &quot;abced&quot;, &quot;abcda&quot;cnt_1, cnt_2, cnt_3 = Counter(str_1), Counter(str_2), Counter(str_3)if cnt_1 == cnt_2: print(&apos;1 and 2 anagram&apos;)if cnt_1 == cnt_3: print(&apos;1 and 3 anagram&apos;) 12. 采用 try-except-else 语句Python 中处理错误异常可以简单采用 try-except 语句，而再添加一个 else 语句会更加有帮助，它是在没有发生异常时，执行完 try 语句后运行的语句。 此外，如果需要运行是否发现异常的都需要执行的代码，可以采用 finally ，示例如下： 12345678910a, b = 1,0try: print(a/b) # exception raised when b is 0except ZeroDivisionError: print(&quot;division by zero&quot;)else: print(&quot;no exceptions raised&quot;)finally: print(&quot;Run this always&quot;) 13. 采用 Enumerate 来获取索引值在迭代列表的时候，可以采用 enumerate 来得到索引值，示例如下： 12345678my_list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]for index, value in enumerate(my_list): print(&apos;&#123;0&#125;: &#123;1&#125;&apos;.format(index, value))# 0: a# 1: b# 2: c# 3: d# 4: e 注意，这里还可以指定索引开始的范围，只需要在调用 enumerate() 时候，添加一个参数，如下所示： 123my_list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]for index, value in enumerate(my_list, 1): print(&apos;&#123;0&#125;: &#123;1&#125;&apos;.format(index, value)) 14. 检查一个对象的内存使用量可以采用 sys.getsizeof() 检查，示例如下： 12345678import sysnum = 21print(sys.getsizeof(num))# In Python 2, 24# In Python 3, 28 15. 合并两个字典在 Python2 版本的时候可以采用 update() 方法实现合并字典的操作，但在 Python3.5 后的版本，可以采用新的方式实现，操作更加简单，如下所示： 12345678dict_1 = &#123;&apos;apple&apos;: 9, &apos;banana&apos;: 6&#125;dict_2 = &#123;&apos;banana&apos;: 4, &apos;orange&apos;: 8&#125;combined_dict = &#123;**dict_1, **dict_2&#125;print(combined_dict)# Output# &#123;&apos;apple&apos;: 9, &apos;banana&apos;: 4, &apos;orange&apos;: 8&#125; 16. 计算代码执行时间采用 time 模块来计算一段代码的执行时间，例子如下： 1234567891011import timestart_time = time.time()# Code to check followsa, b = 1,2c = a+ b# Code to check endsend_time = time.time()time_taken_in_micro = (end_time- start_time)*(10**6)print(&quot; Time taken in micro_seconds: &#123;0&#125; ms&quot;).format(time_taken_in_micro) 17. 展平元素为列表的列表有时候并确定一个列表中的深度有多深，所以你只想简单的将所有元素都放在一个列表中，实现技巧代码如下所示： 123456789101112131415from iteration_utilities import deepflatten# 列表只有一层深度的情况，采用这个函数def flatten(l): return [item for sublist in l for item in sublist]l = [[1,2,3],[3]]print(flatten(l))# [1, 2, 3, 3]# 不知道列表的深度的情况l = [[1,2,3],[4,[5],[6,7]],[8,[9,[10]]]]print(list(deepflatten(l, depth=3)))# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 如果是数组的话，可以采用 Numpy 方式。 18. 从列表中采样采用 random 模块可以对一个列表随机采样 n 个元素，示例如下所示： 1234567import randommy_list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]num_samples = 2samples =random.sample(my_list,num_samples)print(samples)# [ &apos;a&apos;, &apos;e&apos;] this will haveany 2 random values 另外，在 Python 3 中推荐采用 secrets 模块，基于密码学的目的来随机生成样本，示例如下： 12345678910import secrets # imports secure module.secure_random = secrets.SystemRandom() # creates a secure random object.my_list = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;]num_samples = 2samples = secure_random.sample(my_list, num_samples)print(samples)# [ &apos;e&apos;, &apos;d&apos;] this will have any 2 random values 19. 数字化下面是一个例子，将一个数字转换为一个数字列表的形式： 123456num = 123456list_of_digits = list(map(int, str(num)))print(list_of_digits)# [1, 2, 3, 4, 5, 6] 20. 检查唯一性下面的代码是用于判断一个列表的所有元素是否都是唯一没有重复的： 1234567def unique(l): if len(l)==len(set(l)): print(&quot;All elements are unique&quot;) else: print(&quot;List has duplicates&quot;)unique([1,2,3,4])#Allelementsareuniqueunique([1,1,2,3])# List has duplicates","updated":"2019-10-21T05:03:00.329Z","link":"","tags":[{"name":"python","slug":"python","permalink":"https://lifei-2019.github.io/tags/python/"}]},{"title":"SublimeText3插件安装","date":"2019-10-12T05:57:47.000Z","path":"SublimeText3插件安装/","text":"一、下载安装sublime Text3​ 到官网下载安装包（根据你的电脑系统下载对应的version）： ​ 下载好st3后，然后不断的点击next，然后blablabla……就可以安装好了。 二、汉化sbulime Text3（看个人需要）2.1下载汉化安装包 ​ 地址：链接: https://pan.baidu.com/s/1y0c_SJdFMea-tWWruO5YmQ 提取码: rprd 2.2安装汉化包(将汉化包拷到 Installed Packages 文件夹中) ​ 进入：D:\\Sublime Text3\\Data\\Installed Packages（根据你的安装目录去寻找Installed Packages，本文是安装在D盘），将刚刚下载的汉化包解压，得到的文件Default.sublime-package 拷贝到 Installed Packages 文件夹中，这个时候就会发现汉化成功啦！ 三、安装Package Control（重要）​ 关系到很多插件的安装，非常重要！ 3.1 通过工具栏面板 ​ ①点击工具栏的“view”-&gt;”show console”(快捷键 是”ctrl+`”)， ​ ②到https://packagecontrol.io/installation官网，将对应的代码拷贝到显示面板中，然后回车。如果安装成功，那么就显示Package Settings 和Package Control 这两个项。 sublime 3： 1import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) ​ 如果没有安装成功，那么建议用手动安装 3.2通过手动安装 ​ 到https://packagecontrol.io/installation官网，右边有一个“Package Control.sublime-package”，点击下载，然后将文件拷贝到 Installed Packages文件夹中 四、安装st3常用的插件​ 对于sublime text3,它之所以轻巧，是因为它设计就是为了让你按需加载，根据自己的需要，去下载对应的插件，所以才不会像其他的IDE那样笨重。（虽然我当时整了半小时【微笑） ​ 安装插件步骤是：“Preferences -&gt; Package Control”(快捷键是：shift+ctrl+p),然后执行“Package Control: Install Package”,接在就是输入你要安装的插件就可以，下面就说一下你个人常用的插件： 1、ChineseLocalizations 汉化插件 —— 可进行语言切换 2、Emmet（原名 Zen Coding） ——- 可快速编写代码 例如：输入“!”或“html:5”，然后按Tab键，就会将html5基本标签显示出来，其他还有很多快捷方式，想了解的可以去查阅一下Emmet 3、BracketHighlighter ——– 类似于代码匹配，可以匹配括号，引号等符号内的范围 4、cssrem ——- 自动将CSS的px值转rem值 在wepapp开发时,使用rem进行移动端适配的时候，非常好用，省下很多计算的时间。 5、Alignment ——- 自动对齐代码，包括PHP、CSS、JavaScript语言。使得代码看起来更整齐美观，更具可读性 默认快捷键为ctrl + alt + a,如果跟某IM截图的快捷键冲突，可在Preferences-&gt;Package Settings-&gt;Alignment-&gt;Key Bindings - User中自定义快捷键，写法参照Key Bindings - Default 6、Css Format —– css格式化 很快捷的将css的格式进行切换，Expand（标准格式化），Compact（css一行行显示），Compressed（css压缩成一行） 7、DocBlockr —— 观察函数需要的变量名和类型，并创建文档块，只要在函数的上面输入/**，按Tab就可以了 8、SublimeCodeIntel ——- 一个全功能的 Sublime Text 代码自动完成引擎 支持的语言挺多的（JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP.） 9、AutoFileName ——- 自动补全文件路径 10、Autoprefixer ——- 应用css的浏览器兼容书写，自动分析你的css文件，解析出新的css文件 11、JavaScript Completions ——- js最基本的api快查片段 12、minify ——- 压缩和美化html,css,js文件 因为minify利用的是nodejs进行的，所以使用minify需要安装nodejs,同时需要全局安装如下： 1npm install -g clean-css-cli uglifycss js-beautify html-minifier uglify-js minjson svgo","updated":"2019-10-21T05:03:08.980Z","link":"","tags":[{"name":"Sublime","slug":"Sublime","permalink":"https://lifei-2019.github.io/tags/Sublime/"}]},{"title":"Typora入门","date":"2019-10-12T01:49:26.000Z","path":"typora/","text":"简介​ Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。​ Markdown的语法因不同的解析器或编辑器而异，Typora使用的是GitHub Flavored Markdown。 下载Typora下载。 常用快捷键 加粗： Ctrl/Cmd + B 标题： Ctrl/Cmd + H 插入链接： Ctrl/Cmd + K 插入代码： Ctrl/Cmd + Shift + C 行内代码： Ctrl/Cmd + Shift + K 插入图片： Ctrl/Cmd + Shift + I 无序列表： Ctrl/Cmd + Shift + L 撤销： Ctrl/Cmd + Z 一级标题：快捷键为Crtl + 1，以此类推 块元素换行符在markdown中，段落由多个空格分隔。在Typora中，只需回车即可创建新段落。 标题级别 # 一级标题， 快捷键为Crtl + 1## 二级标题，快捷键为Crtl + 2###### 六级标题，快捷键为Crtl + 6 引用文字 &gt; + 空格 + 引用文字 清单输入 *列表内容 将创建一个无序列表，该*符号可以替换为+或-。 输入1. 列表内容 将创建一个有序列表，其markdown源代码如下： 无序列表* AA* BB* CC 有序列表 AA BB CC 任务列表 - [ ] 不勾选- [x] 勾选 代码块在Typora中输入””” + 回车，并在后面选择一个语言名称即可语法高亮。 语法高亮:\\ 12&gt; &gt; def helloWorld():&gt; print &apos;hello, world&apos;&gt; \\&gt; 数学表达式输入$$，然后按“回车”键，如下：$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\end{vmatrix}$$ $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\end{vmatrix}$$ 表输入| 表头1 | 表头2 |并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下： First Header Second Header 脚注 你可以创建一个脚注，像这样^1. 你可以创建一个脚注，像这样^1. 注意：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。 分割线输入***或--- 再按回车即可绘制一条水平线，如下： YAML Front MatterTypora支持YAML Front Matter， 在文章开头输入---，然后按回车即可。 目录（TOC）输入[toc]然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。 跨度元素跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。 链接内部链接 这是一个带有标题属性的[链接](http://example.com/ “标题”).这是一个没有标题属性的链接. 效果如下： 这是一个带有标题属性的链接.这是一个没有标题属性的链接. 参考链接 这是一个[参考链接]id。[id]: http://example.com/ “标题” 这是一个参考链接。 网址Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。输入[td_940915122@qq.com](mailto:940915122@qq.com) 即 td_940915122@qq.com。Typora还会自动链接标准网址。例如：https://lifei-2019.github.io/。 图片 *单个星号*_单下划线_ 效果如下：单个星号 单下划线 加粗 *两个星号*_双下划线_ 效果如下：两个星号双下划线 代码标记标记代码使用反引号，即在英文输入法下，ESC键下面和1键左边的符号——`效果如下：使用该printf()功能。 删除线 ~删除线 效果如下： 删除线 下划线&lt;u&gt;下划线 效果如下： 下划线 表情符号:smile: ：smile ：（注意为：是英文的冒号） :smile: 下标 H~2~O H2O (需在设置中打开该功能) 上标 X^2^ X^2^ (需在设置中打开该功能) 高亮 ==高亮== ==高亮==(需在设置中打开该功能) HTML支持HTML 嵌入内容支持iframe-based嵌入代码， &lt; iframe height=’265’ scrolling=’no’ title=’Fancy Animated SVG Menu’ src=’http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#39; frameborder=’no’ allowtransparency=’true’ allowfullscreen=’true’ style=’width: 100%;’&gt; 视频 &lt; video src=”xxx.mp4” /&gt; :call_me_hand:常用字体及颜色设置 :call_me_hand:修改Typora默认样式 总结： 建议打开大纲视图（快捷键ctrl + shift + 1）。 插入表格需要顶格写，不然显示不出来。 以上语法不用刻意记，在Typora中的右键菜单都有， 常用功能基本上都有快捷键。 学计算机真让人掉发。","updated":"2019-10-21T05:02:36.356Z","link":"","tags":[{"name":"typora","slug":"typora","permalink":"https://lifei-2019.github.io/tags/typora/"}]},{"title":"hexo+github建站","date":"2019-10-10T11:18:47.000Z","path":"hexo1/","text":"前言 欢迎在文末留言，觉得有帮助的话可以请作者喝杯咖啡。 本文采用 CC BY-NC-SA 4.0 许可协议，转载请注明出处！ 博客搭建准备环境 Node.js 下载，并安装。 Git 下载，并安装。（强烈推荐廖雪峰老师教程） 安装Hexo，在命令行（即Git Bash）运行以下命令： npm install -g hexo-cli 初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可： 以下，即存放Hexo初始化文件的路径， 即站点目录。 1$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，在路径下，会产生这些文件和文件夹： 1.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 注： hexo相关命令均在站点目录下，用Git Bash运行。 站点配置文件：站点目录下的_config.yml。 路径为&lt;folder&gt;\\_config.yml 主题配置文件：站点目录下的themes文件夹下的，主题文件夹下的_config.yml。 路径为&lt;folder&gt;\\themes\\&lt;主题文件夹&gt;\\_config.yml 启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可： hexo server 浏览器访问网址： http://localhost:4000/ 至此，您的Hexo博客已经搭建在本地。 实施方案方案一：GithubPages 创建Github账号 创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io 将本地Hexo博客推送到GithubPages 3.1. 安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可： 1$ npm install hexo-deployer-git --save 3.2. 添加SSH key。 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可： 1$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到 github。 复制密钥文件内容（路径形如C:\\Users\\Administrator\\.ssh\\id_rsa.pub），粘贴到New SSH Key即可。 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 1$ ssh -T git@github.com$ yes 3.3. 修改_config.yml（在站点目录下）。文件末尾修改为： 1# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注意：上面仓库地址写ssh地址，不写http地址。 3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送： 1$ hexo g$ hexo d 等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io 至此，您的Hexo博客已经搭建在GithubPages, 域名为https://&lt;Github账号名称&gt;.github.io。 方案二：GithubPages + 域名在方案一的基础上，添加自定义域名（您购买的域名）。 域名解析。 类型选择为 CNAME； 主机记录即域名前缀，填写为www； 记录值填写为&lt;Github账号名称&gt;.github.io； 解析线路，TTL 默认即可。 仓库设置。 2.1. 打开博客仓库设置：https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings 2.2. 在Custom domain下，填写自定义域名，点击save。 2.3. 在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名（如www.simon96.online），保存，并重命名为CNAME。 等待10分钟左右。 浏览器访问自定义域名。 至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io依然可用。 方案三：GithubPages + CodingPages + 域名GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。 创建Coding账号 创建仓库， 仓库名为：&lt;Coding账号名称&gt; 进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。 将本地Hexo博客推送到CodingPages 4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如C:\\Users\\Administrator\\.ssh\\id_rsa.pub）， 粘贴到新增公钥。 4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 1$ ssh -T git@git.coding.net$ yes 4.3. 修改_config.yml（在存放Hexo初始化文件的路径下）。文件末尾修改为： 1# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master- type: git repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git branch: master 4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送： 1$ hexo g$ hexo d 域名解析 添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me 类型选择为 CNAME； 主机记录即域名前缀，填写为www； 记录值填写为&lt;Github账号名称&gt;.coding.me； 解析线路，TTL 默认即可。 添加 两条A 记录指向 192.30.252.153和192.30.252.154 类型选择为 A； 主机记录即域名前缀，填写为@； 记录值填写为192.30.252.153和192.30.252.154； 解析线路，境外或谷歌。 在『Pages 服务』设置页（https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings）中绑定自定义域名。 至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io和https://&lt;Coding账号名称&gt;.coding.me依然可用。 主题优化选择主题Hexo默认的主题是landscape，推荐以下主题： snippet Hiero JSimple BlueLake 详见：https://github.com/search?q=hexo-theme 应用主题 下载主题 将下载好的主题文件夹，粘贴到站点目录的themes下。 更改站点配置文件_config.yml 的theme字段，为主题文件夹的名称： 1# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: &lt;主题文件夹的名称&gt; 主题优化以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。 主题优化一般包括： 设置「RSS」 添加「标签」页面 添加「分类」页面 设置「字体」 问题：引用国外字体镜像较慢。 解决：可以改用国内的。将\\themes*\\layout_partials\\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。 设置「代码高亮主题」 侧边栏社交链接 问题：图标哪里找？ 解决：Font Awesome 开启打赏功能 问题：微信支付宝二维码不美观，规格不一。 解决：在线生成二维码 设置友情链接 腾讯公益404页面 站点建立时间 订阅微信公众号 设置「动画效果」 问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。解决：将主题配置文件_config.yml中，use_motion字段的值设为 false 来关闭动画。 设置「背景动画」 主题优化还包括： 添加背景图在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 1body&#123; background:url(/images/bg.jpg); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125; 修改Logo字体在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 1@font-face &#123; font-family: Zitiming; src: url(&apos;/fonts/Zitiming.ttf&apos;);&#125;.site-title &#123; font-size: 40px !important; font-family: &apos;Zitiming&apos; !important;&#125; 其中字体文件在 themes/next/source/fonts 目录下，里面有个 .gitkeep 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 Zitiming.ttf ，具体字库自己从网上下载即可。 修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量： 1// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px 网站标题栏背景颜色打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 1.site-meta &#123; background: $blue; //修改为自己喜欢的颜色&#125; 自定义鼠标样式打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 1// 鼠标样式 * &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important &#125; 文章加密访问打开 themes/*/layout/_partials/head.swig文件,在 ``之前插入代码： 1&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 写文章时加上password: *： 1---title: 2018date: 2018-10-25 16:10:03password: 123456--- 实现点击出现桃心效果 在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中。代码如下： 1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在\\themes\\*\\layout\\_layout.swig文件末尾添加： 1&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 静态资源压缩在站点目录下： 1$ npm install gulp -g 安装gulp插件： 1npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save 在 Hexo 站点下新建 gulpfile.js文件，文件内容如下： 1var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);// 压缩css文件gulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩html文件gulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩js文件gulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;]) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public/demo 目录内图片gulp.task(&apos;minify-images&apos;, function() &#123; gulp.src(&apos;./public/demo/**/*.*&apos;) .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest(&apos;./public/uploads&apos;));&#125;);// 默认任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;]); 只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器： 1hexo ggulphexo d 修改访问URL路径默认情况下访问URL路径为：domain/2018/10/18/关于本站,修改为 domain/About/关于本站。 编辑 Hexo 站点下的 _config.yml 文件，修改其中的 permalink字段： 1permalink: :category/:title/ 博文置顶 安装插件 $ npm uninstall hexo-generator-index –save$ npm install hexo-generator-index-pin-top –save 然后在需要置顶的文章的Front-matter中加上top即可： 1---title: 2018date: 2018-10-25 16:10:03top: 10--- 设置置顶标志 打开：/themes/*/layout/_macro/post.swig，定位到 ，插入以下代码即可： 1&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; 在右上角或者左上角实现fork me on github 选择样式GitHub Ribbons, 修改图片跳转链接,将&lt;a href=&quot;https://github.com/you&quot;&gt;中的链接换为自己Github链接： 打开 themes/next/layout/_layout.swig 文件，把代码复制到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面。 主页文章添加边框阴影效果打开 themes/*/source/css/_custom/custom.styl ,向里面加代码: 1// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 显示当前浏览进度修改themes/*/_config.yml，把 false 改为 true： 1# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true 创建分类页在终端窗口下，定位到 Hexo 站点目录下，新建： 1$ cd &lt;站点目录&gt;$ hexo new page categories 加入 广告主要有两种：百度SSP和谷歌Adsense。方法类似： 注册，复制广告代码 部署到网站。 2.1. 新建 theme/*/layout/_custom/google_ad.swig，将 AdSense 上的代码粘贴进去 2.2. 头部。在 theme/*/layout/_custom/head.swig 中也粘贴一份 2.3. 每篇博客。在 theme/*/layout/post.swig 里中在希望看到的地方加上： 1&#123;% include &apos;_custom/google_ad.swig&apos; %&#125; 例如：在 &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt; 中间插入，总代码如下： 1&#123;% block content %&#125; &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;&#123; post_template.render(page) &#125;&#125; &#123;% include &apos;_custom/google_ad.swig&apos; %&#125; &lt;/div&gt;&#123;% endblock %&#125; 等待审核通过。如果失败，可再次申请。 添加萌萌哒 安装插件 1npm install --save hexo-helper-live2d 复制你喜欢的模型名字： Epsilon2.1 Gantzert_Felixander haru miku ni-j nico nietzche nipsilon nito shizuku tsumiki wanko z16 hibiki koharu haruto Unitychan tororo hijiki 将以下代码添加到主题配置文件_config.yml，修改&lt;你喜欢的模型名字&gt;： 1live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-&lt;你喜欢的模型名字&gt; display: position: right width: 150 height: 300 mobile: show: true 建配置文件 4.1. 在站点目录下建文件夹live2d_models， 4.2. 再在live2d_models下建文件夹&lt;你喜欢的模型名字&gt;, 4.3. 再在&lt;你喜欢的模型名字&gt;下建json文件：&lt;你喜欢的模型名字&gt;.model.json 安装模型。在命令行（即Git Bash）运行以下命令即可： npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt; 在命令行（即Git Bash）运行以下命令， 在http://127.0.0.1:4000/查看测试结果: hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 插件配置以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。 评论系统 推荐指数 优点 缺点 Valine 4 每天30000条评论，10GB的储存 作者评论无标识 来必力/livere 4 多种账号登录 评论无法导出 畅言 3 美观 必须备案域名 gitment 3 简洁 只能登陆github评论 Disqus 1 需要翻*墙 Valine1.1. 获取APP ID 和 APP Key 请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用， 进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了。 1.2. 填写APP ID 和 APP Key到主题配置文件_config.yml 1.3. 运行hexo g&amp;&amp;hexo d推送到博客。 来必力/livere2.1. 登陆 来必力 获取你的 LiveRe UID。 2.2. 填写LiveRe UID到主题配置文件_config.yml 畅言3.1.获取APP ID 和 APP Key 请先登录或注册 畅言, 点击“立即免费获取畅言”， 新建站点，点击管理，点击评论插件&gt;评论管理， 点击后台总览，然后就能看到你的APP ID和APP Key了。 3.2. 填写APP ID 和 APP Key到主题配置文件_config.yml 3.3. 运行hexo g&amp;&amp;hexo d推送到博客。 gitment4.1. 安装插件： npm i –save gitment 4.2. 申请应用 在New OAuth App为你的博客应用一个密钥: 1Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址 4.3. 配置 编辑主题配置文件themes/*/_config.yml: 1# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more language: # Force language, or auto switch by theme github_user: &#123;you github user id&#125; github_repo: 公开的git仓库,评论会作为那个项目的issue client_id: &#123;刚才申请的ClientID&#125; client_secret: &#123;刚才申请的Client Secret&#125; proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_pro Disqus编辑 主题配置文件themes/*/_config.yml， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。 1disqus: enable: false shortname: count: true 数据统计与分析 推荐指数 优点 缺点 不蒜子 4 可直接将访问次数显示在您在网页上（也可不显示） 只计数 百度统计 3 收录慢 不蒜子编辑 主题配置文件 themes/*/_config.yml中的busuanzi_count的配置项即可。 当enable: true时，代表开启全局开关。 若site_uv（本站访客数）、site_pv（本站访客数）、page_pv（本文总阅读量）的值均为false时，不蒜子仅作记录而不会在页面上显示。 注意： 1不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！ 解决办法： 找到主题调用不蒜子的swig文件。一般在”\\themes*\\layout_third-party\\analytics\\busuanzi-counter.swig” 更改域名 1把原有的：&lt;script async src=&quot;\u0001\u0001//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt;域名改一下即可：&lt;script async src=&quot;\u0001\u0001//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt; 百度统计 登录 百度统计，定位到站点的代码获取页面 复制统计脚本 id，如图：​ 编辑 主题配置文件themes/*/_config.yml，修改字段 google_analytics，值设置成你的统计脚本 id。 内容分享服务 推荐指数 优点 缺点 百度分享 4 稳定 不太美观 need-more-share2 4 美观 更新不及时（比如微信分享API） 百度分享编辑 主题配置文件，添加/修改字段 baidushare，值为 true即可。 1# 百度分享服务baidushare: true need-more-share2编辑 主题配置文件，添加/修改字段 needmoreshare2，值为 true即可。 1needmoreshare2: enable: true 搜索服务 推荐指数 优点 缺点 Local Search 4 配置方便 Swiftype 2 需注册 Algolia 2 需注册 Local Search添加百度/谷歌/本地 自定义站点内容搜索 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置： 1search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： 1# Local searchlocal_search: enable: true 错误分析如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。 YAML Parsing Error1JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29: last_updated: Last updated: %s 参数中包含冒号，请用加引号，如Last updated: %s 1JS-YAML: bad indentation of a mapping entry at line 18, column 31: last_updated：&quot;Last updated: %s&quot; 字段后面的冒号必须为英文冒号，如：last_updated: 字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s” EMFILE Error1Error: EMFILE, too many open files 生成大量的文件时，可能遇到EMFILE错误。 可以运行以下命令来增加允许同步I / O操作的数量。 1$ ulimit -n 10000 Process Out of Memory当hexo g时，遇到以下错误： 1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory 如下，更改hexo-cli文件的第一行，来增大nodejs堆内存.该bug已在新版本修复。 1#!/usr/bin/env node --max_old_space_size=8192 Git Deployment Problems RPC failed 1error: RPC failed; result=22, HTTP code = 403fatal: &apos;username.github.io&apos; does not appear to be a git repository 确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。 Error: ENOENT: no such file or directory 这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。 解决办法： 检查文章的标签和类别,确保本地和github上是相同的。 合并分支（Commit）。 清除，重构。在站点目录下，命令行（即Git Bash）运行hexo clean和hexo g 手动将站点目录下的public文件夹复制到您的桌面 从你的master分支切换到部署在本地分支。 从桌面复制public文件夹到本地分支。 合并分支到github（Commit）。 切回master分支。 Server Problems1Error: listen EADDRINUSE 你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置： 1$ hexo server -p 5000 Plugin Installation Problems1npm ERR! node-waf configure build 这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。 Error with DTrace (Mac OS X)1&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125; DTrace安装可能有问题，重装: 1$ npm install hexo --no-optional 详见 #1326 Iterate Data Model on Jade or SwigHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。 1&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125; Data Not Updated一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次： 1$ hexo clean No command is executed那个不能使用除help、init和version以外的命令行（即Git Bash）时, 有可能时站点目录下的 package.json文件，缺少hexo，如下: 1&#123; &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.2.2&quot; &#125;&#125; Escape ContentsHexo使用Nunjucks渲染的页面. { { } }或{ % % }将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号： 12 Hello 1​```#### ENOSPC Error (Linux)如果运行命令`$ hexo server` 返回一个错误: Error: watch ENOSPC … 1可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）： $ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 1来增加测试时，你可以看见的文件数量。#### EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误: Error: watch /path/to/hexo/theme/ EMPERM 1因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。所以需要重新编译，再启动服务器： $ hexo generate$ hexo server -s 1#### Template render error有时运行命令`$ hexo generate` 返回一个错误: FATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) 1这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：错误例子： plugins:hexo-generator-feedhexo-generator-sitemap&lt;!–￼66–&gt; $ hexo new [layout] 123456789101112参数说明：- [layout]可以为以下三种：| 参数名 | 功能 | 文章路径 || :----- | :---------------------- | :------------- || post | 新建博文 | source/_posts || page | 新建页面（如404，分类） | source || draft | 草稿 | source/_drafts |草稿可通过一下命令发布： $ hexo publish [layout] ``` title注意： 不是博文标题， 是博文markdown文件的名字， 也是博文链接的后缀（如https://lifei-2019.github.io/typora/中的typora） 文章模版 创建模版 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： $ hexo new blog “simon” 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 blog.md，并根据其内容建立文章。 修改参数 以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 Front-matter就是博文最上方以 --- 分隔的那部分。 默认可以使用的Front-matter： 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址","updated":"2019-10-21T05:03:16.641Z","link":"","tags":[{"name":"hexo","slug":"hexo","permalink":"https://lifei-2019.github.io/tags/hexo/"}]},{"title":"浅析《海边的卡夫卡》","date":"2019-10-10T10:50:52.000Z","path":"kafuka/","text":"大约刚好一个月看完了《海边的卡夫卡》，头一次看村上的书，海边的卡夫卡由奇数章和偶数章两个故事交替展开，并在最后交叉在一起。 在网上看到这样一段话： 村上创作中设定的某些意象，并没有明确的所指。村上的文学不会追求那种确切的、现成的现实“意义”。村上春树在《为故事冒险》一文中明确表达了如下观点:他说小说中的主题已完全失去了意义，也许结果上看会出现所谓的“主题”或意义，但却不会一开始便决定“要写某一主题”。村上认定那样写出的小说毫无意义。村上强调说，在他的创作中，题材、主题都是第二位的，作为一个人，才是自己写作的全部理由。自己的写作只能写自己，换言之，即表现自己的内在生命力。而20世纪80年代以后的新一代日本作家就要创立适于自己特点的新文体——村上春树崇尚的，正是这种开放的自信和完全自由的表现。作为小说家，村上更多的是要通过作品表达自己的创作理念。——《村上春树小说的异质特色》，魏大海 （未完待续！等我找个好点的编辑器）","updated":"2019-10-12T03:48:54.356Z","link":"","tags":[{"name":"读书","slug":"读书","permalink":"https://lifei-2019.github.io/tags/读书/"}]},{"title":"enjoy life！enjoy coding！","date":"2019-10-10T10:33:28.000Z","path":"test/","text":"衷心感谢dalao的教导","updated":"2019-10-21T05:02:26.073Z","link":"","tags":[]}]